//index.js
//获取应用实例
var app = getApp()
const util = require('../../../utils/util.js')
//var timePoint = '2017-10-28 13:00:00'
//基准的当前时间
var timePoint = '2017-10-20 18:28:00'
Page({
  data: {
    mySteps: 0, //当前步数
    initSteps: 0, //初始化步数
    durationTime:0, //持续时间：当前时间 - 开始时间
    remainTime:0, //剩余时间:结束时间-当前时间
    isGuest:'',
    countTime:10,
    isShowCount:false,
    activityStatus:null
  },
  //更新步数
  updateCurrentSteps: function () {
    var _this = this;
    setInterval(function () {
      var userSteps = app.globalData.userSteps
      var initSteps = app.globalData.initSteps
      var durationTime = _this.data.durationTime;
      var newData = userSteps - initSteps
      if (durationTime === "未开始"){
        newData = 0;
      }
      _this.setData({
        mySteps: newData,
        initSteps: initSteps
      });
    }, 1000);

  },
  updateTime:function(){
    var _this = this;
    setInterval(function () {
      var beginTime = app.globalData.beginTime;
      var endTime = app.globalData.endTime
      var now = new Date().getTime()
      var durationTime = now - beginTime;
      var remainTime = endTime - now;
    
      if (durationTime <= 0) {
        //未开始
        _this.setData({
          durationTime: '未开始',
          remainTime: util.formatDuring(endTime - beginTime)
        });
      }else if(remainTime<0){
        //结束
        _this.setData({
          durationTime: util.formatDuring(endTime - beginTime),
          remainTime: '已结束'
        });
        
      } else {
        _this.setData({
          durationTime: util.formatDuring(durationTime),
          remainTime: util.formatDuring(remainTime)
        });
      }

    
    }, 1000);
   

  },
  /**
   * 循环判断是否开始倒计时
   */
  isBeginCycle:function(){
    console.log('-------倒计开始时IsBeginCycle------')
    return new Promise(function (resolve, reject){
       var beginTime = app.globalData.beginTime
       var currentTime = new Date().getTime()
       var beginTimeInter
       var timeRange = beginTime - currentTime
       if (beginTime && timeRange <= 0) {
         //活动已经开始
         resolve()
         return
       }
       if (beginTime && (beginTime - currentTime)<=11000 ) {
         //开始
         clearInterval(beginTimeInter)
         resolve()
       }
       beginTimeInter = setInterval(function () {
        // debugger
         console.log("当前时间："+new Date(),app.globalData)
         let bTime = app.globalData.beginTime
         let cTime = new Date().getTime()
         if (beginTime && timeRange <= 0) {
           //活动已经开始
           clearInterval(beginTimeInter)
           resolve() 
           return
         }
         console.log('----倒计开始前：------',bTime -cTime)
         if (bTime && (bTime - cTime) <= 11000){
           clearInterval(beginTimeInter)
           resolve()
         }
       }, 1000);
     });
      
  },
 
  countDown:function(){
    console.log('-----倒计时开始-------')
    var _this = this;
    var isShowCount = _this.data.isShowCount;
    var num = _this.data.countTime;
    name = setInterval(function () {
      _this.setData({
        countTime:num
      })
      num--;
      if (num == -1) {
        _this.setData({
          isShowCount: false
        })
        clearInterval(name);
      }
    }, 1000);
  },
  onShow: function () {
    var _this = this;
  //   var isGuest = _this.data.isGuest;
  //   _this.setData({
  //     isGuest: app.globalData.isGuest
  //   })
  //  // this.countDown();
  //   this.hasAuth()
  //  //倒计时
  //   this.isBeginCycle().then(function(){
  //     var num = app.globalData.beginTime - new Date().getTime()
  //     if(num>0){
  //       _this.setData({
  //         'isShowCount': true,
  //         'num:': num
  //       })
  //       _this.countDown()
  //     }
    
  //   });
  //   wx.getWeRunData({
  //     success(res) { 
  //     },
  //     fail() {
  //       _this.authRun();
  //     }
  //   })
   
  //   this.updateTime();
  //   this.updateCurrentSteps();
    this.setActivtyStatusCycle()
  },
  backTo:function(){
    wx.navigateTo({
      url: '../guestInfo/guestInfo'
    })
  },
  hasAuth:function(){
    wx.getWeRunData({
      success: function (res) {
        // app.()
      },
      fail: function (res) {
        console.log('失败')
       // app.gainOpenId(app.userInfoReadyCallback)
      }
    });
  },
  //auth run
  authRun(){
    //再次授权
    wx.getSetting({
      success: function success(res) {
        if (!res.authSetting['scope.werun']) {
          wx.showModal({
            title: '用户未授权',
            content: '美女or帅哥请授权获取运动，让我们一起happy~',
            showCancel: false,
            success: function (res) {
              if (res.confirm) {
                wx.openSetting({
                  success: function success(res) {
                  }
                });
              }
            }
          })
        }
      }
    });
  },



  //------------------万恶分割线---------------------
  //根据条件设置不同的状态为
  setActivtyStatus:function(){
    var currentTime = new Date().getTime()
    var pointTime = new Date(timePoint).getTime()
    var endTime = app.globalData.endTime
    var beginTime = app.globalData.beginTime
    debugger
    if(endTime && currentTime > endTime){
      //活动结束
      var initSteps = wx.getStorageSync("initSteps") || 0
      var userSteps = wx.getStorageSync('userSteps') || 0
       
      this.setData({
        activityStatus: 3,
        mySteps:userSteps - initSteps
      })
      return
    }
    if (currentTime < pointTime){
      var countDownTime = pointTime - currentTime;
      //活动倒计时
      this.setData({
        activityStatus: 0,
        countTime:util.timeFormat(countDownTime)
      })
      return
    }
    var status 
    //判断活动标识位置
    console.log(app.globalData)
    if (app.globalData.startFlag) {
      //已经开始
      status = 2
      //修改持续时间
      var durationTime = currentTime -beginTime
      console.log(app.globalData,"userInfo------------------")
      var mySteps =  app.globalData.userSteps - app.globalData.initSteps 
      this.setData({
        activityStatus: 2,
        durationTime: util.formatDuring(durationTime),
        mySteps: mySteps
      })
    } else {
      //即将开始
      status = 1
    }
    //设置活动状态
    this.setData({
      activityStatus:status
    })
  },
  setActivtyStatusCycle:function(){
    var _this = this
    this.setActivtyStatus()
    var setActivtyStatusCycleInter = setInterval(function(){
      if (_this.data.activityStatus && _this.data.activityStatus==3 ){
        //活动结束，结束循环
        clearInterval(setActivtyStatusCycleInter)
        return
      }
      _this.setActivtyStatus()
    },1000);
  }

})